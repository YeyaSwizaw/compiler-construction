# Stack-based Functional Programming.
# Stack: <top> <bottom>

5

# Stack: 5

7

# Stack: 7 5

+

# Stack: (+: x -> y -> { x + y }) 7 5

() # Fully apply a function

# Stack: 12

3 *

# Stack: (*: x -> y -> { x * y }) 3 12

(1) # Apply 1 argument

# Stack: (y -> { 3 * y }) 12

(1)

# Stack: 36

# Define a function
swap: a -> b -> {
    a b
} 

1 swap

# Stack: (swap: a -> b -> { a b }) 1 36

()

# Stack: 36 1
